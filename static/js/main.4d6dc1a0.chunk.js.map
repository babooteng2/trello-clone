{"version":3,"sources":["Atoms.tsx","Components/DraggableCard.tsx","Components/Board.tsx","App.tsx","GlobalStyle.tsx","index.tsx","theme.ts"],"names":["toDoState","atom","key","default","Doing","Done","Card","styled","div","props","isDragging","theme","cardColor","DraggableCard","toDoId","toDoText","index","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","React","memo","Wrapper","boardColor","Title","h2","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","toDos","boardId","setToDos","useSetRecoilState","useForm","register","setValue","handleSubmit","onSubmit","data","newToDo","id","Date","now","text","toDo","allBoards","required","type","placeholder","droppableId","Boolean","draggingFromThisWith","droppableProps","map","Boards","App","useRecoilState","onDragEnd","args","destination","source","boardCopy","sIndex","dIndex","taskObj","splice","dropBoardCopy","Object","keys","Styling","createGlobalStyle","bgColor","GlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d6dc1a0.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nexport interface IToDo {\r\n  id: number;\r\n  text: string;\r\n}\r\ninterface IToDoState {\r\n  [key: string]: IToDo[];\r\n}\r\n\r\nexport const toDoState = atom<IToDoState>({\r\n  key: \"toDo\",\r\n  default: {\r\n    \"To Do\": [],\r\n    Doing: [],\r\n    Done: [],\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport styled from \"styled-components\";\r\n\r\n/* interface DraggableStateSnapshot */\r\nconst Card = styled.div<{ isDragging: boolean }>`\r\n  border-radius: 5px;\r\n  margin-bottom: 5px;\r\n  padding: 10px 10px;\r\n  background-color: ${(props) =>\r\n    props.isDragging ? \"#00cec9\" : props.theme.cardColor};\r\n  box-shadow: ${(props) =>\r\n    props.isDragging ? \"0px 2px 5px rgba(0,0,0,0.5)\" : \"none\"};\r\n`;\r\n\r\ninterface IDragabbleCardProps {\r\n  toDoId: number;\r\n  toDoText: string;\r\n  index: number;\r\n}\r\n\r\nfunction DraggableCard({ toDoId, toDoText, index }: IDragabbleCardProps) {\r\n  return (\r\n    <Draggable key={toDoId} draggableId={toDoId + \"\"} index={index}>\r\n      {(provided, snapshot) => (\r\n        <Card\r\n          isDragging={snapshot.isDragging}\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          {toDoText}\r\n        </Card>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\nexport default React.memo(DraggableCard);\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { IToDo, toDoState } from \"../Atoms\";\r\nimport DraggableCard from \"./DraggableCard\";\r\n\r\nconst Wrapper = styled.div`\r\n  width: 300px;\r\n  padding-top: 10px;\r\n  background-color: ${(props) => props.theme.boardColor};\r\n  border-radius: 5px;\r\n  min-height: 300px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  text-align: center;\r\n  font-weight: 600;\r\n  margin-bottom: 10px;\r\n  font-size: 18px;\r\n`;\r\n\r\ninterface IAreaProps {\r\n  isDraggingOver: boolean;\r\n  isDraggingFromThis: boolean;\r\n}\r\n\r\nconst Area = styled.div<IAreaProps>`\r\n  background-color: ${(props) =>\r\n    props.isDraggingOver\r\n      ? \"#0984e3\"\r\n      : props.isDraggingFromThis\r\n      ? \"#74b9ff\"\r\n      : \"transparent\"};\r\n  flex-grow: 1;\r\n  transition: background-color 0.3s ease-in-out;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  width: 100%;\r\n  input {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\ninterface IBoardProps {\r\n  toDos: IToDo[];\r\n  boardId: string;\r\n}\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction Board({ toDos, boardId }: IBoardProps) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const { register, setValue, handleSubmit } = useForm<IForm>();\r\n  const onValid = (data: IForm) => {\r\n    const newToDo = { id: Date.now(), text: data.toDo };\r\n    setToDos((allBoards) => {\r\n      return {\r\n        ...allBoards,\r\n        [boardId]: [newToDo, ...allBoards[boardId]],\r\n      };\r\n    });\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <Title>{boardId}</Title>\r\n      <Form onSubmit={handleSubmit(onValid)}>\r\n        <input\r\n          {...register(\"toDo\", { required: true })}\r\n          type=\"text\"\r\n          placeholder={`Add task on ${boardId}`}\r\n        />\r\n      </Form>\r\n      <Droppable droppableId={boardId}>\r\n        {(provided, snapshot) => (\r\n          <Area\r\n            isDraggingOver={snapshot.isDraggingOver}\r\n            isDraggingFromThis={Boolean(snapshot.draggingFromThisWith)}\r\n            ref={provided.innerRef}\r\n            {...provided.droppableProps}\r\n          >\r\n            {toDos.map((toDo, index) => (\r\n              // key and draggableId must be the same\r\n              <DraggableCard\r\n                key={toDo.id}\r\n                index={index}\r\n                toDoId={toDo.id}\r\n                toDoText={toDo.text}\r\n              />\r\n            ))}\r\n            {provided.placeholder}\r\n          </Area>\r\n        )}\r\n      </Droppable>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import { DragDropContext, DropResult } from \"react-beautiful-dnd\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { toDoState } from \"./Atoms\";\r\nimport Board from \"./Components/Board\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n`;\r\n\r\nconst Boards = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n  gap: 10px;\r\n`;\r\n\r\nfunction App() {\r\n  const [toDos, setToDos] = useRecoilState(toDoState);\r\n  const onDragEnd = (args: DropResult) => {\r\n    const { destination, source } = args;\r\n    // if destination == null kill this function\r\n    if (!destination) return;\r\n    if (source.droppableId === destination?.droppableId) {\r\n      setToDos((allBoards) => {\r\n        const boardCopy = [...allBoards[source.droppableId]];\r\n        const sIndex = source.index;\r\n        const dIndex = destination?.index;\r\n        const taskObj = boardCopy[source.index];\r\n        boardCopy.splice(sIndex, 1);\r\n        boardCopy.splice(dIndex, 0, taskObj);\r\n        return { ...allBoards, [source.droppableId]: boardCopy };\r\n      });\r\n    }\r\n    if (source.droppableId !== destination.droppableId) {\r\n      setToDos((allBoards) => {\r\n        const boardCopy = [...allBoards[source.droppableId]];\r\n        const dropBoardCopy = [...allBoards[destination.droppableId]];\r\n        const taskObj = boardCopy[source.index];\r\n        boardCopy.splice(source.index, 1);\r\n        dropBoardCopy.splice(destination.index, 0, taskObj);\r\n        return {\r\n          ...allBoards,\r\n          [source.droppableId]: boardCopy,\r\n          [destination.droppableId]: dropBoardCopy,\r\n        };\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Wrapper>\r\n        <Boards>\r\n          {Object.keys(toDos).map((boardId) => (\r\n            <Board boardId={boardId} key={boardId} toDos={toDos[boardId]} />\r\n          ))}\r\n          ;\r\n        </Boards>\r\n      </Wrapper>\r\n    </DragDropContext>\r\n  );\r\n}\r\nexport default App;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst Styling = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  background-color:${(props) => props.theme.bgColor};\r\n  color:black;\r\n  line-height: 1.2;\r\n}\r\na {\r\n  text-decoration:none;\r\n  color:inherit;\r\n}\r\n`;\r\n\r\nfunction GlobalStyle() {\r\n  return <Styling />;\r\n}\r\n\r\nexport default GlobalStyle;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./App\";\r\nimport GlobalStyle from \"./GlobalStyle\";\r\nimport { darkTheme } from \"./theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <GlobalStyle />\r\n        <App />\r\n      </ThemeProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  boardColor: \"#DADFE9\",\r\n  cardColor: \"white\",\r\n};\r\n"],"sourceRoot":""}